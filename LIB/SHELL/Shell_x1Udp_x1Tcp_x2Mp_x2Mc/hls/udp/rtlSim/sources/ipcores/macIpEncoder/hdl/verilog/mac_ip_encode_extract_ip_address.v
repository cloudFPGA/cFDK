// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mac_ip_encode_extract_ip_address (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        arpTableOut_V_V_din,
        arpTableOut_V_V_full_n,
        arpTableOut_V_V_write,
        regSubNetMask_V,
        regDefaultGateway_V,
        dataStreamBuffer1_V_dout,
        dataStreamBuffer1_V_empty_n,
        dataStreamBuffer1_V_read,
        dataStreamBuffer2_V_din,
        dataStreamBuffer2_V_full_n,
        dataStreamBuffer2_V_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv32_48 = 32'b1001000;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] arpTableOut_V_V_din;
input   arpTableOut_V_V_full_n;
output   arpTableOut_V_V_write;
input  [31:0] regSubNetMask_V;
input  [31:0] regDefaultGateway_V;
input  [72:0] dataStreamBuffer1_V_dout;
input   dataStreamBuffer1_V_empty_n;
output   dataStreamBuffer1_V_read;
output  [72:0] dataStreamBuffer2_V_din;
input   dataStreamBuffer2_V_full_n;
output   dataStreamBuffer2_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] arpTableOut_V_V_din;
reg arpTableOut_V_V_write;
reg dataStreamBuffer1_V_read;
reg dataStreamBuffer2_V_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
reg   [1:0] eia_wordCount_V = 2'b00;
wire   [0:0] tmp_nbreadreq_fu_90_p3;
reg    ap_sig_bdd_56;
reg   [0:0] tmp_reg_210;
reg   [72:0] tmp15_reg_214;
wire   [0:0] cond_fu_123_p2;
reg   [0:0] cond_reg_220;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_74;
wire   [0:0] or_cond_fu_187_p2;
reg    ap_sig_bdd_93;
wire   [31:0] dstIpAddress_V_fu_161_p1;
wire   [1:0] tmp_30_fu_143_p2;
wire   [0:0] tmp_112_fu_129_p3;
wire   [0:0] tmp_29_fu_137_p2;
wire   [31:0] tmp_s_fu_165_p2;
wire   [31:0] tmp_26_fu_170_p2;
wire   [0:0] tmp_27_fu_175_p2;
wire   [0:0] tmp_28_fu_181_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_sig_bdd_117;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_93)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == tmp_reg_210) & ~(ap_const_lv1_0 == cond_reg_220) & ~ap_sig_bdd_93)) begin
        eia_wordCount_V <= ap_const_lv2_3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(tmp_nbreadreq_fu_90_p3 == ap_const_lv1_0) & ~ap_sig_bdd_56 & (ap_const_lv1_0 == cond_fu_123_p2) & ~(ap_const_lv1_0 == tmp_112_fu_129_p3))) begin
        eia_wordCount_V <= ap_const_lv2_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(tmp_nbreadreq_fu_90_p3 == ap_const_lv1_0) & ~ap_sig_bdd_56 & (ap_const_lv1_0 == cond_fu_123_p2) & (ap_const_lv1_0 == tmp_112_fu_129_p3) & (ap_const_lv1_0 == tmp_29_fu_137_p2))) begin
        eia_wordCount_V <= tmp_30_fu_143_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(tmp_nbreadreq_fu_90_p3 == ap_const_lv1_0) & ~ap_sig_bdd_56)) begin
        cond_reg_220 <= cond_fu_123_p2;
        tmp15_reg_214 <= dataStreamBuffer1_V_dout;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_56)) begin
        tmp_reg_210 <= tmp_nbreadreq_fu_90_p3;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_93)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_93))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_93)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_93)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21)
begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_74)
begin
    if (ap_sig_bdd_74) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// arpTableOut_V_V_din assign process. ///
always @ (regDefaultGateway_V or or_cond_fu_187_p2 or dstIpAddress_V_fu_161_p1 or ap_sig_bdd_117)
begin
    if (ap_sig_bdd_117) begin
        if (~(ap_const_lv1_0 == or_cond_fu_187_p2)) begin
            arpTableOut_V_V_din = dstIpAddress_V_fu_161_p1;
        end else if ((ap_const_lv1_0 == or_cond_fu_187_p2)) begin
            arpTableOut_V_V_din = regDefaultGateway_V;
        end else begin
            arpTableOut_V_V_din = 'bx;
        end
    end else begin
        arpTableOut_V_V_din = 'bx;
    end
end

/// arpTableOut_V_V_write assign process. ///
always @ (tmp_reg_210 or cond_reg_220 or ap_sig_cseq_ST_st2_fsm_1 or or_cond_fu_187_p2 or ap_sig_bdd_93)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == tmp_reg_210) & ~(ap_const_lv1_0 == cond_reg_220) & (ap_const_lv1_0 == or_cond_fu_187_p2) & ~ap_sig_bdd_93) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == tmp_reg_210) & ~(ap_const_lv1_0 == cond_reg_220) & ~(ap_const_lv1_0 == or_cond_fu_187_p2) & ~ap_sig_bdd_93))) begin
        arpTableOut_V_V_write = ap_const_logic_1;
    end else begin
        arpTableOut_V_V_write = ap_const_logic_0;
    end
end

/// dataStreamBuffer1_V_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or tmp_nbreadreq_fu_90_p3 or ap_sig_bdd_56)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(tmp_nbreadreq_fu_90_p3 == ap_const_lv1_0) & ~ap_sig_bdd_56)) begin
        dataStreamBuffer1_V_read = ap_const_logic_1;
    end else begin
        dataStreamBuffer1_V_read = ap_const_logic_0;
    end
end

/// dataStreamBuffer2_V_write assign process. ///
always @ (tmp_reg_210 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_93)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == tmp_reg_210) & ~ap_sig_bdd_93)) begin
        dataStreamBuffer2_V_write = ap_const_logic_1;
    end else begin
        dataStreamBuffer2_V_write = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_56 or ap_sig_bdd_93)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_56) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~ap_sig_bdd_93) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_117 assign process. ///
always @ (tmp_reg_210 or cond_reg_220 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_93)
begin
    ap_sig_bdd_117 = ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == tmp_reg_210) & ~(ap_const_lv1_0 == cond_reg_220) & ~ap_sig_bdd_93);
end

/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_56 assign process. ///
always @ (ap_start or ap_done_reg or dataStreamBuffer1_V_empty_n or tmp_nbreadreq_fu_90_p3)
begin
    ap_sig_bdd_56 = (((dataStreamBuffer1_V_empty_n == ap_const_logic_0) & ~(tmp_nbreadreq_fu_90_p3 == ap_const_lv1_0)) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_74 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_74 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_93 assign process. ///
always @ (arpTableOut_V_V_full_n or dataStreamBuffer2_V_full_n or tmp_reg_210 or cond_reg_220 or or_cond_fu_187_p2)
begin
    ap_sig_bdd_93 = (((arpTableOut_V_V_full_n == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_reg_210) & ~(ap_const_lv1_0 == cond_reg_220) & (ap_const_lv1_0 == or_cond_fu_187_p2)) | ((arpTableOut_V_V_full_n == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_reg_210) & ~(ap_const_lv1_0 == cond_reg_220) & ~(ap_const_lv1_0 == or_cond_fu_187_p2)) | (~(ap_const_lv1_0 == tmp_reg_210) & (dataStreamBuffer2_V_full_n == ap_const_logic_0)));
end
assign cond_fu_123_p2 = (eia_wordCount_V == ap_const_lv2_2? 1'b1: 1'b0);
assign dataStreamBuffer2_V_din = tmp15_reg_214;
assign dstIpAddress_V_fu_161_p1 = tmp15_reg_214[31:0];
assign or_cond_fu_187_p2 = (tmp_27_fu_175_p2 | tmp_28_fu_181_p2);
assign tmp_112_fu_129_p3 = dataStreamBuffer1_V_dout[ap_const_lv32_48];
assign tmp_26_fu_170_p2 = (tmp_s_fu_165_p2 & regSubNetMask_V);
assign tmp_27_fu_175_p2 = (tmp_26_fu_170_p2 == ap_const_lv32_0? 1'b1: 1'b0);
assign tmp_28_fu_181_p2 = (dstIpAddress_V_fu_161_p1 == ap_const_lv32_FFFFFFFF? 1'b1: 1'b0);
assign tmp_29_fu_137_p2 = (eia_wordCount_V == ap_const_lv2_3? 1'b1: 1'b0);
assign tmp_30_fu_143_p2 = (eia_wordCount_V + ap_const_lv2_1);
assign tmp_nbreadreq_fu_90_p3 = dataStreamBuffer1_V_empty_n;
assign tmp_s_fu_165_p2 = (dstIpAddress_V_fu_161_p1 ^ regDefaultGateway_V);


endmodule //mac_ip_encode_extract_ip_address

