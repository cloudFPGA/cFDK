// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module udp_udpChecksumCalculation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        outputPathWriteFunction2checks_dout,
        outputPathWriteFunction2checks_empty_n,
        outputPathWriteFunction2checks_read,
        outputPathWriteFunction2checks_1_dout,
        outputPathWriteFunction2checks_1_empty_n,
        outputPathWriteFunction2checks_1_read,
        checksumCalculation2outputPath_din,
        checksumCalculation2outputPath_full_n,
        checksumCalculation2outputPath_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] outputPathWriteFunction2checks_dout;
input   outputPathWriteFunction2checks_empty_n;
output   outputPathWriteFunction2checks_read;
input  [0:0] outputPathWriteFunction2checks_1_dout;
input   outputPathWriteFunction2checks_1_empty_n;
output   outputPathWriteFunction2checks_1_read;
output  [15:0] checksumCalculation2outputPath_din;
input   checksumCalculation2outputPath_full_n;
output   checksumCalculation2outputPath_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg checksumCalculation2outputPath_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm = 1'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_20;
reg   [1:0] udpChecksumState_1 = 2'b00;
reg   [31:0] udpChecksum_V_1 = 32'b00000000000000000000000000000000;
wire   [0:0] tmp_36_nbwritereq_fu_68_p3;
wire    outputPathWriteFunction2checks0_status;
wire   [0:0] grp_nbreadreq_fu_83_p4;
reg    ap_sig_bdd_71;
reg    outputPathWriteFunction2checks0_update;
wire   [0:0] tmp_eop_V_fu_231_p1;
wire   [31:0] p_Val2_25_fu_208_p2;
wire   [31:0] tmp_55_fu_281_p2;
wire   [31:0] tmp_85_cast_fu_345_p1;
wire   [15:0] tmp_99_fu_144_p1;
wire   [15:0] r_V_fu_152_p4;
wire   [16:0] tmp_94_cast_fu_148_p1;
wire   [16:0] r_V_cast_fu_162_p1;
wire   [15:0] tmp_102_fu_172_p1;
wire   [15:0] tmp_103_fu_176_p2;
wire   [16:0] tmp_56_fu_166_p2;
wire   [0:0] tmp_104_fu_186_p3;
wire   [16:0] tmp_96_cast_fu_182_p1;
wire   [16:0] r_V_2_fu_194_p1;
wire   [16:0] tmp_57_fu_198_p2;
wire   [31:0] tmp_97_cast_fu_204_p1;
wire   [15:0] grp_fu_106_p4;
wire   [15:0] grp_fu_116_p4;
wire   [15:0] grp_fu_126_p4;
wire   [15:0] tmp_101_fu_247_p1;
wire   [31:0] tmp_54_fu_235_p1;
wire   [16:0] tmp_68_cast_fu_251_p1;
wire   [16:0] tmp_67_cast_fu_243_p1;
wire   [16:0] tmp4_fu_261_p2;
wire   [17:0] tmp_66_cast_fu_239_p1;
wire   [17:0] tmp4_cast_fu_267_p1;
wire   [17:0] tmp3_fu_271_p2;
wire   [31:0] tmp2_fu_255_p2;
wire   [31:0] tmp3_cast_fu_277_p1;
wire   [15:0] tmp_100_fu_311_p1;
wire   [16:0] tmp_80_cast_fu_303_p1;
wire   [16:0] tmp_cast_fu_299_p1;
wire   [16:0] tmp_s_fu_319_p2;
wire   [16:0] tmp_82_cast_cast_fu_315_p1;
wire   [16:0] tmp_81_cast_cast_fu_307_p1;
wire   [16:0] tmp1_fu_329_p2;
wire   [17:0] tmp_83_cast_fu_325_p1;
wire   [17:0] tmp1_cast_fu_335_p1;
wire   [17:0] tmp_53_fu_339_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_sig_bdd_52;
reg    ap_sig_bdd_88;
reg    ap_sig_bdd_64;
reg    ap_sig_bdd_74;
reg    ap_sig_bdd_61;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_71)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (ap_sig_bdd_74) begin
        if (ap_sig_bdd_64) begin
            udpChecksumState_1 <= ap_const_lv2_1;
        end else if (ap_sig_bdd_88) begin
            udpChecksumState_1 <= ap_const_lv2_2;
        end else if (ap_sig_bdd_52) begin
            udpChecksumState_1 <= ap_const_lv2_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (ap_sig_bdd_74) begin
        if (ap_sig_bdd_64) begin
            udpChecksum_V_1 <= tmp_85_cast_fu_345_p1;
        end else if (ap_sig_bdd_61) begin
            udpChecksum_V_1 <= tmp_55_fu_281_p2;
        end else if (ap_sig_bdd_52) begin
            udpChecksum_V_1 <= p_Val2_25_fu_208_p2;
        end
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_71)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_71))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_71)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_71)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_20)
begin
    if (ap_sig_bdd_20) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// checksumCalculation2outputPath_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or udpChecksumState_1 or tmp_36_nbwritereq_fu_68_p3 or ap_sig_bdd_71)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & (udpChecksumState_1 == ap_const_lv2_2) & ~(tmp_36_nbwritereq_fu_68_p3 == ap_const_lv1_0) & ~ap_sig_bdd_71)) begin
        checksumCalculation2outputPath_write = ap_const_logic_1;
    end else begin
        checksumCalculation2outputPath_write = ap_const_logic_0;
    end
end

/// outputPathWriteFunction2checks0_update assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or udpChecksumState_1 or grp_nbreadreq_fu_83_p4 or ap_sig_bdd_71)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & (udpChecksumState_1 == ap_const_lv2_1) & ~(ap_const_lv1_0 == grp_nbreadreq_fu_83_p4) & ~ap_sig_bdd_71) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == grp_nbreadreq_fu_83_p4) & (ap_const_lv2_0 == udpChecksumState_1) & ~ap_sig_bdd_71))) begin
        outputPathWriteFunction2checks0_update = ap_const_logic_1;
    end else begin
        outputPathWriteFunction2checks0_update = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_71)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_20 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_20 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_52 assign process. ///
always @ (udpChecksumState_1 or tmp_36_nbwritereq_fu_68_p3)
begin
    ap_sig_bdd_52 = ((udpChecksumState_1 == ap_const_lv2_2) & ~(tmp_36_nbwritereq_fu_68_p3 == ap_const_lv1_0));
end

/// ap_sig_bdd_61 assign process. ///
always @ (udpChecksumState_1 or grp_nbreadreq_fu_83_p4)
begin
    ap_sig_bdd_61 = ((udpChecksumState_1 == ap_const_lv2_1) & ~(ap_const_lv1_0 == grp_nbreadreq_fu_83_p4));
end

/// ap_sig_bdd_64 assign process. ///
always @ (udpChecksumState_1 or grp_nbreadreq_fu_83_p4)
begin
    ap_sig_bdd_64 = (~(ap_const_lv1_0 == grp_nbreadreq_fu_83_p4) & (ap_const_lv2_0 == udpChecksumState_1));
end

/// ap_sig_bdd_71 assign process. ///
always @ (ap_start or ap_done_reg or udpChecksumState_1 or checksumCalculation2outputPath_full_n or tmp_36_nbwritereq_fu_68_p3 or outputPathWriteFunction2checks0_status or grp_nbreadreq_fu_83_p4)
begin
    ap_sig_bdd_71 = (((checksumCalculation2outputPath_full_n == ap_const_logic_0) & (udpChecksumState_1 == ap_const_lv2_2) & ~(tmp_36_nbwritereq_fu_68_p3 == ap_const_lv1_0)) | ((outputPathWriteFunction2checks0_status == ap_const_logic_0) & (udpChecksumState_1 == ap_const_lv2_1) & ~(ap_const_lv1_0 == grp_nbreadreq_fu_83_p4)) | ((outputPathWriteFunction2checks0_status == ap_const_logic_0) & ~(ap_const_lv1_0 == grp_nbreadreq_fu_83_p4) & (ap_const_lv2_0 == udpChecksumState_1)) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_74 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_71)
begin
    ap_sig_bdd_74 = ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_71);
end

/// ap_sig_bdd_88 assign process. ///
always @ (udpChecksumState_1 or grp_nbreadreq_fu_83_p4 or tmp_eop_V_fu_231_p1)
begin
    ap_sig_bdd_88 = ((udpChecksumState_1 == ap_const_lv2_1) & ~(ap_const_lv1_0 == grp_nbreadreq_fu_83_p4) & ~(ap_const_lv1_0 == tmp_eop_V_fu_231_p1));
end
assign checksumCalculation2outputPath_din = p_Val2_25_fu_208_p2[15:0];
assign grp_fu_106_p4 = {{outputPathWriteFunction2checks_dout[ap_const_lv32_3F : ap_const_lv32_30]}};
assign grp_fu_116_p4 = {{outputPathWriteFunction2checks_dout[ap_const_lv32_2F : ap_const_lv32_20]}};
assign grp_fu_126_p4 = {{outputPathWriteFunction2checks_dout[ap_const_lv32_1F : ap_const_lv32_10]}};
assign grp_nbreadreq_fu_83_p4 = (outputPathWriteFunction2checks_empty_n & outputPathWriteFunction2checks_1_empty_n);
assign outputPathWriteFunction2checks0_status = (outputPathWriteFunction2checks_empty_n & outputPathWriteFunction2checks_1_empty_n);
assign outputPathWriteFunction2checks_1_read = outputPathWriteFunction2checks0_update;
assign outputPathWriteFunction2checks_read = outputPathWriteFunction2checks0_update;
assign p_Val2_25_fu_208_p2 = (tmp_97_cast_fu_204_p1 ^ ap_const_lv32_FFFFFFFF);
assign r_V_2_fu_194_p1 = tmp_104_fu_186_p3;
assign r_V_cast_fu_162_p1 = r_V_fu_152_p4;
assign r_V_fu_152_p4 = {{udpChecksum_V_1[ap_const_lv32_1F : ap_const_lv32_10]}};
assign tmp1_cast_fu_335_p1 = tmp1_fu_329_p2;
assign tmp1_fu_329_p2 = (tmp_82_cast_cast_fu_315_p1 + tmp_81_cast_cast_fu_307_p1);
assign tmp2_fu_255_p2 = (tmp_54_fu_235_p1 + udpChecksum_V_1);
assign tmp3_cast_fu_277_p1 = tmp3_fu_271_p2;
assign tmp3_fu_271_p2 = (tmp_66_cast_fu_239_p1 + tmp4_cast_fu_267_p1);
assign tmp4_cast_fu_267_p1 = tmp4_fu_261_p2;
assign tmp4_fu_261_p2 = (tmp_68_cast_fu_251_p1 + tmp_67_cast_fu_243_p1);
assign tmp_100_fu_311_p1 = outputPathWriteFunction2checks_dout[15:0];
assign tmp_101_fu_247_p1 = outputPathWriteFunction2checks_dout[15:0];
assign tmp_102_fu_172_p1 = udpChecksum_V_1[15:0];
assign tmp_103_fu_176_p2 = (r_V_fu_152_p4 + tmp_102_fu_172_p1);
assign tmp_104_fu_186_p3 = tmp_56_fu_166_p2[ap_const_lv32_10];
assign tmp_36_nbwritereq_fu_68_p3 = checksumCalculation2outputPath_full_n;
assign tmp_53_fu_339_p2 = (tmp_83_cast_fu_325_p1 + tmp1_cast_fu_335_p1);
assign tmp_54_fu_235_p1 = grp_fu_106_p4;
assign tmp_55_fu_281_p2 = (tmp2_fu_255_p2 + tmp3_cast_fu_277_p1);
assign tmp_56_fu_166_p2 = (tmp_94_cast_fu_148_p1 + r_V_cast_fu_162_p1);
assign tmp_57_fu_198_p2 = (tmp_96_cast_fu_182_p1 + r_V_2_fu_194_p1);
assign tmp_66_cast_fu_239_p1 = grp_fu_116_p4;
assign tmp_67_cast_fu_243_p1 = grp_fu_126_p4;
assign tmp_68_cast_fu_251_p1 = tmp_101_fu_247_p1;
assign tmp_80_cast_fu_303_p1 = grp_fu_116_p4;
assign tmp_81_cast_cast_fu_307_p1 = grp_fu_126_p4;
assign tmp_82_cast_cast_fu_315_p1 = tmp_100_fu_311_p1;
assign tmp_83_cast_fu_325_p1 = tmp_s_fu_319_p2;
assign tmp_85_cast_fu_345_p1 = tmp_53_fu_339_p2;
assign tmp_94_cast_fu_148_p1 = tmp_99_fu_144_p1;
assign tmp_96_cast_fu_182_p1 = tmp_103_fu_176_p2;
assign tmp_97_cast_fu_204_p1 = tmp_57_fu_198_p2;
assign tmp_99_fu_144_p1 = udpChecksum_V_1[15:0];
assign tmp_cast_fu_299_p1 = grp_fu_106_p4;
assign tmp_eop_V_fu_231_p1 = outputPathWriteFunction2checks_1_dout;
assign tmp_s_fu_319_p2 = (tmp_80_cast_fu_303_p1 + tmp_cast_fu_299_p1);


endmodule //udp_udpChecksumCalculation

