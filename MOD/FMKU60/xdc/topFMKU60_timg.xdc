# ******************************************************************************
# * Copyright 2016 -- 2020 IBM Corporation
# *
# * Licensed under the Apache License, Version 2.0 (the "License");
# * you may not use this file except in compliance with the License.
# * You may obtain a copy of the License at
# *
# *     http://www.apache.org/licenses/LICENSE-2.0
# *
# * Unless required by applicable law or agreed to in writing, software
# * distributed under the License is distributed on an "AS IS" BASIS,
# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# * See the License for the specific language governing permissions and
# * limitations under the License.
# ******************************************************************************

# ******************************************************************************
# *
# *                                cloudFPGA
# *
# *-----------------------------------------------------------------------------
# *
# * Title   : Default timing constraint file for the project cFp_Monolithic.
# *
# * File    : topMonolithic_timg.xdc
# *
# * Tools   : Vivado v2016.4, v2017.4 v2019.2 (64-bit)
# *
# * Description : This file contains module independent timing constraints for
# *     the project cFp_Monolithic. Refer to 'top<MODULENAME>.xdc' files for
# *     more specific physical constraints such as pin locations and voltage
# *     levels.
# *     The constraints are grouped by external devices and connector entity names:
# *       - the synchronous dynamic random access memory (SDRM or DDR4)
# *       - the programmable system on chip controller (PSOC)
# *       - the configuration Flash memory (FLASH)
# *       - the clock tree generator (CLKT)
# *       - the edge backplane connector (ECON)
# *       - the top extension connector (XCON)
# *
# *     The SDRM has the following interfaces:
# *       - a memory channel 0 (MC0)
# *       - a memory channel 1 (MC1)
# *     The PSOC has the following interfaces:
# *       - an External memory interface (PSOC_Emif)
# *       - an Fpga configuration interface (PSOC_Fcfg)
# *     The FLASH has the following interfaces:
# *       - a byte peripheral interface (FLASH_Bpi)
# *     The CLKT has the following interfaces:
# *       -
# *     The ECON has the following interfaces:
# *     The XCON has the following interfaces:
# *
# *-----------------------------------------------------------------------------
# * Constraints Methodology and Recommendations (according to Xilinx UG903)
# *   - Xilinx recommends to separate timing constraints and physical constraints
# *     by saving them into two distinct files.
# *   - Organize your constraints in the following sequence.
# *     [1] Timing Assertions Section
# *       - Primary clocks
# *       -  Virtual clocks
# *       -  Generated clocks
# *       -  Clock Groups
# *       -  Bus Skew constraints
# *       -  InpOBSOut and output delay constraints
# *     [2] Timing Exceptions Section
# *       -  False Paths
# *       -  Max Delay / Min Delay
# *       -  Multicycle Paths
# *       -  Case Analysis
# *       -  Disable Timing
# *     [3] Physical Constraints Section
# *       -  located anywhere in the file, preferably before or after the timing constraints
# *       -  or stored in a separate constraint file
# *
# ******************************************************************************


################################################################################
#                                                                              #
#  WARNING: This file makes use of constants which are defined in a TCL file.  #
#           Please see the local file: 'xdc_settings.tcl'.                     #
#                                                                              #
################################################################################

#===============================================================================
# Create the Primary Root Clocks as generated by the Clock Tree (CLKT)
#===============================================================================

# CLKT / Reference clock for GTH transceivers of the 10GE Interface
#  [INFO] This clock is already constrained by the IP core.
#  create_clock -name piCLKT_10GeClk -period 6.400 [get_ports piCLKT_10GeClk_p]

# CLKT / Reference clock for the User clock #0
create_clock -period 6.400 -name piCLKT_Usr0Clk_p [get_ports piCLKT_Usr0Clk_p]

# CLKT / Reference clock for the User clock #1
# [NOT-USED] create_clock -period 4.000 -name piCLKT_Usr1Clk_p [get_ports piCLKT_Usr1Clk_p]

# CLKT / Reference clock for the DRAM block 0
#  [INFO] This clock is already constrained by the IP core.
# create_clock -name piCLKT_Mem0Clk -period 3.333 [get_ports piCLKT_Mem0Clk_p]

# CLKT / Reference clock for the DRAM block 1
#  [INFO] This clock is already constrained by the IP core.
# create_clock -name piCLKT_Mem1Clk -period 3.333 [get_ports piCLKT_Mem1Clk_p]

#===============================================================================
# Create the Primary Root Clock as generated by the EMIF bus I/F of the PSOC
#===============================================================================
create_clock -period 166.667 -name piPSOC_Emif_Clk -waveform {0.000 83.333} [get_ports piPSOC_Emif_Clk]

#===============================================================================
# Internally Generated Clocks
#===============================================================================
# NONE

#===============================================================================
# Create the Group Constraints among Primary Clocks
#===============================================================================
set_clock_groups -asynchronous -group { piCLKT_10GeClk_p } -group { piCLKT_Usr0Clk_p  }
set_clock_groups -asynchronous -group [get_clocks piCLKT_10GeClk_p] -group [get_clocks -of_objects [get_pins SHELL/SuperCfg.ETH0/ETH/CORE/IP/inst/xpcs/inst/ten_gig_eth_pcs_pma_shared_clock_reset_block/txusrclk2_bufg_gt_i/O]]

# set_clock_groups -asynchronous -group { piCLKT_10GeClk_p } -group { piCLKT_Usr1Clk_p  }
# set_clock_groups -asynchronous -group { piCLKT_10GeClk_p } -group { piCLKT_Mem0Clk_p  }
# set_clock_groups -asynchronous -group { piCLKT_10GeClk_p } -group { piCLKT_Mem1Clk_p  }
# set_clock_groups -asynchronous -group { piCLKT_10GeClk_p } -group { piPSOC_Emif_Clk }

set_clock_groups -asynchronous -group piCLKT_Usr0Clk_p -group piCLKT_Mem0Clk_p
set_clock_groups -asynchronous -group piCLKT_Usr0Clk_p -group piCLKT_Mem1Clk_p
set_clock_groups -asynchronous -group piCLKT_Usr0Clk_p -group piPSOC_Emif_Clk
# [NOT-USED: piCLKT_Usr1Clk]set_clock_groups -asynchronous -group piCLKT_Usr0Clk_p -group piCLKT_Usr1Clk

# [NOT-USED: piCLKT_Usr1Clk] set_clock_groups -asynchronous -group piCLKT_Usr1Clk -group piCLKT_Mem0Clk_p
# [NOT-USED: piCLKT_Usr1Clk] set_clock_groups -asynchronous -group piCLKT_Usr1Clk -group piCLKT_Mem1Clk_p
# [NOT-USED: piCLKT_Usr1Clk] set_clock_groups -asynchronous -group piCLKT_Usr1Clk -group piPSOC_Emif_Clk

set_clock_groups -asynchronous -group piCLKT_Mem0Clk_p -group piCLKT_Mem1Clk_p
set_clock_groups -asynchronous -group piCLKT_Mem0Clk_p -group piPSOC_Emif_Clk
set_clock_groups -asynchronous -group piCLKT_Mem1Clk_p -group piPSOC_Emif_Clk

#===============================================================================
# Create the Group Constraints among Generated Clocks and Primary Clocks
#===============================================================================
set_clock_groups -asynchronous -group { sSHL_156_25Clk } -group { piCLKT_Usr0Clk_p }
set_clock_groups -asynchronous -group [get_clocks -of_objects [get_pins SHELL/SuperCfg.ETH0/ETH/CORE/IP/U0/xpcs/U0/ten_gig_eth_pcs_pma_shared_clock_reset_block/txusrclk2_bufg_gt_i/O]] -group piCLKT_Usr0Clk_p
set_clock_groups -asynchronous -group sSHL_156_25Clk -group piPSOC_Emif_Clk
set_clock_groups -asynchronous -group [get_clocks -of_objects [get_pins SHELL/SuperCfg.ETH0/ETH/CORE/IP/U0/xpcs/U0/ten_gig_eth_pcs_pma_shared_clock_reset_block/txusrclk2_bufg_gt_i/O]] -group piPSOC_Emif_Clk

set_clock_groups -asynchronous -group [get_clocks -of_objects [get_pins SHELL/SuperCfg.ETH0/ETH/CORE/IP/U0/xpcs/U0/ten_gig_eth_pcs_pma_shared_clock_reset_block/txusrclk2_bufg_gt_i/O]] -group [get_clocks piPSOC_Emif_Clk]

set_clock_groups -asynchronous -group { sSHL_156_25Clk } -group { piCLKT_10GeClk_p }  
set_clock_groups -asynchronous -group [get_clocks -of_objects [get_pins SHELL/SuperCfg.ETH0/ETH/CORE/IP/U0/xpcs/U0/ten_gig_eth_pcs_pma_shared_clock_reset_block/txusrclk2_bufg_gt_i/O]] -group piCLKT_10GeClk_p

#===============================================================================
# Create the Group Constraints among Generated Clocks
#===============================================================================
set_clock_groups -asynchronous -group [get_clocks -of_objects [get_pins SHELL/SuperCfg.ETH0/ETH/CORE/IP/U0/xpcs/U0/ten_gig_eth_pcs_pma_shared_clock_reset_block/txusrclk2_bufg_gt_i/O]] -group [get_clocks -of_objects [get_pins SHELL/SuperCfg.ETH0/ETH/ALCG/MMCME3_BASE_inst/CLKOUT0]]
set_clock_groups -asynchronous -group [get_clocks -of_objects [get_pins SHELL/SuperCfg.ETH0/ETH/CORE/IP/U0/xpcs/U0/ten_gig_eth_pcs_pma_shared_clock_reset_block/txusrclk2_bufg_gt_i/O]] -group [get_clocks -of_objects [get_pins SHELL/SuperCfg.ETH0/ETH/CORE/IP/U0/xpcs/U0/ten_gig_eth_pcs_pma_block_i/bd_b7e6_xpcs_0_local_clock_reset_block/rxusrclk2_bufg_gt_i/O]]
set_clock_groups -asynchronous -group [get_clocks -of_objects [get_pins SHELL/SuperCfg.ETH0/ETH/CORE/IP/U0/xpcs/U0/ten_gig_eth_pcs_pma_shared_clock_reset_block/txusrclk2_bufg_gt_i/O]] -group [get_clocks -of_objects [get_pins SHELL/MEM/MC0/MCC/inst/u_ddr4_infrastructure/gen_mmcme3.u_mmcme_adv_inst/CLKOUT0]]
set_clock_groups -asynchronous -group [get_clocks -of_objects [get_pins SHELL/SuperCfg.ETH0/ETH/CORE/IP/U0/xpcs/U0/ten_gig_eth_pcs_pma_shared_clock_reset_block/txusrclk2_bufg_gt_i/O]] -group [get_clocks -of_objects [get_pins SHELL/MEM/MC1/MCC/inst/u_ddr4_infrastructure/gen_mmcme3.u_mmcme_adv_inst/CLKOUT0]]

set_clock_groups -asynchronous -group { mmcm0} -group { sSHL_156_25Clk }  
set_clock_groups -asynchronous -group [get_clocks -of_objects [get_pins SHELL/MEM/MC0/MCC/inst/u_ddr4_infrastructure/gen_mmcme3.u_mmcme_adv_inst/CLKOUT0]] -group [get_clocks -of_objects [get_pins SHELL/SuperCfg.ETH0/ETH/CORE/IP/inst/xpcs/inst/ten_gig_eth_pcs_pma_shared_clock_reset_block/txusrclk2_bufg_gt_i/O]]

set_clock_groups -asynchronous -group { mmcm0_1} -group { sSHL_156_25Clk }  
set_clock_groups -asynchronous -group [get_clocks -of_objects [get_pins SHELL/MEM/MC1/MCC/inst/u_ddr4_infrastructure/gen_mmcme3.u_mmcme_adv_inst/CLKOUT0]] -group [get_clocks -of_objects [get_pins SHELL/SuperCfg.ETH0/ETH/CORE/IP/inst/xpcs/inst/ten_gig_eth_pcs_pma_shared_clock_reset_block/txusrclk2_bufg_gt_i/O]]



#=====================================================================
# Constraints related to the Synchronous Dynamic RAM (DDR4)
#   DDR4 / Memory Channel #0 / Reset
#=====================================================================
set_max_delay -from [get_pins {SHELL/MEM/MC0/MCC/inst/u_ddr4_mem_intfc/u_ddr_cal_top/cal_RESET_n_reg[0]/C}] -to [get_ports poDDR4_Mem_Mc0_Reset_n] 10.000

#=====================================================================
# Constraints related to the Synchronous Dynamic RAM (DDR4)
#   DDR4 / Memory Channel #1 / Reset
#=====================================================================
set_max_delay -from [get_pins {SHELL/MEM/MC1/MCC/inst/u_ddr4_mem_intfc/u_ddr_cal_top/cal_RESET_n_reg[0]/C}] -to [get_ports poDDR4_Mem_Mc1_Reset_n] 10.000


#=====================================================================
# Constraints related to the Internal MMIO/EMIF Architecture
#=====================================================================
#OBSOLETE_20210104 set_max_delay -from [get_pins {SHELL/MMIO/EMIF/sEmifReg_reg[*]/C}] -to [get_pins {SHELL/MMIO/SuperCfg.DPRAM/vRAM_reg_bram_0/ADDRARDADDR[*]}] 6.4
set_max_delay -datapath_only -from [get_clocks -of_objects [get_pins SHELL/SuperCfg.ETH0/ETH/CORE/IP/inst/xpcs/inst/ten_gig_eth_pcs_pma_shared_clock_reset_block/txusrclk2_bufg_gt_i/O]] -to [get_clocks piPSOC_Emif_Clk] 6.400
set_max_delay -datapath_only -from [get_clocks piPSOC_Emif_Clk] -to [get_clocks -of_objects [get_pins SHELL/SuperCfg.ETH0/ETH/CORE/IP/inst/xpcs/inst/ten_gig_eth_pcs_pma_shared_clock_reset_block/txusrclk2_bufg_gt_i/O]] 6.400

#=====================================================================
# PSOC / External Memory Interface (see PSoC Creator Component v1.30)
#---------------------------------------------------------------------
#
#             +---+   +---+   +---+   +---+   +---+   +---+   +---+   +---+
# Bus Clock   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
#          ---+   +---+   +---+   +---+   +---+   +---+   +---+   +---+   +---
#
#                         +---+                           +---+
# EMIF Clk                |   |                           |   |
#          ---------------+   +---------------------------+   +---------------
#
#              +-----------------------------+ +------------------------------
# EMIF Addr --X                               X
#              +-----------------------------+ +------------------------------
#
#            ---------+       +-----------------------+       +---------------
# EMIF CTtl           |       |                       |       |
# (WE,CE,ADS)         +-------+                       +-------+
#
#          -------------------------------------------+               +------
# EMIF OE                                             |               |
#                                                     +---------------+
#
#                    +--------------------------------+             +----+
# EMIF DATA ---------|    Write Cycle                 |-------------| Rd |---
#                    +--------------------------------+             +----+
#
#=====================================================================

# PSoC / Emif - Address[7:0] - Write setup and hold times
set_input_delay -clock [get_clocks piPSOC_Emif_Clk] -min -add_delay 140.000 [get_ports {piPSOC_Emif_Addr[*]}]
set_input_delay -clock [get_clocks piPSOC_Emif_Clk] -max -add_delay 146.667 [get_ports {piPSOC_Emif_Addr[*]}]

# PSOC / Emif - Chip select - Access setup and hold times
set_input_delay -clock [get_clocks piPSOC_Emif_Clk] -min -add_delay 140.000 [get_ports piPSOC_Emif_Cs_n]
set_input_delay -clock [get_clocks piPSOC_Emif_Clk] -max -add_delay 146.667 [get_ports piPSOC_Emif_Cs_n]

# PSOC / Emif - Write enable - Write setup and hold times
set_input_delay -clock [get_clocks piPSOC_Emif_Clk] -min -add_delay 140.000 [get_ports piPSOC_Emif_We_n]
set_input_delay -clock [get_clocks piPSOC_Emif_Clk] -max -add_delay 146.667 [get_ports piPSOC_Emif_We_n]

# PSoC / Emif - Output enable - Read setup and hold times
set_input_delay  -clock [get_clocks piPSOC_Emif_Clk] -min -add_delay 140.000 [get_ports piPSOC_Emif_Oe_n]
set_input_delay  -clock [get_clocks piPSOC_Emif_Clk] -max -add_delay 146.667 [get_ports piPSOC_Emif_Oe_n]

# PSoC / Emif - Data[7:0] - Write setup and hold times
set_input_delay -clock [get_clocks piPSOC_Emif_Clk] -min -add_delay 140.000 [get_ports {pioPSOC_Emif_Data[*]}]
set_input_delay -clock [get_clocks piPSOC_Emif_Clk] -max -add_delay 146.667 [get_ports {pioPSOC_Emif_Data[*]}]

# PSoC / Emif - Data[7:0] - Read setup and hold times
# OBSOLETE set_max_delay -from [get_pins {SHELL/MMIO/EMIF/sBus_Addr_reg[*]/C}] -to [get_pins {SHELL/MMIO/EMIF/sEmifReg_reg[*]/CE}] 20.0

# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -min -add_delay  5.000 [get_ports {pioPSOC_Emif_Data[0]}]
# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -max -add_delay 61.000 [get_ports {pioPSOC_Emif_Data[0]}]
# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -min -add_delay  5.000 [get_ports {pioPSOC_Emif_Data[1]}]
# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -max -add_delay 61.000 [get_ports {pioPSOC_Emif_Data[1]}]
# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -min -add_delay  5.000 [get_ports {pioPSOC_Emif_Data[2]}]
# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -max -add_delay 61.000 [get_ports {pioPSOC_Emif_Data[2]}]
# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -min -add_delay  5.000 [get_ports {pioPSOC_Emif_Data[3]}]
# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -max -add_delay 61.000 [get_ports {pioPSOC_Emif_Data[3]}]
# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -min -add_delay  5.000 [get_ports {pioPSOC_Emif_Data[4]}]
# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -max -add_delay 61.000 [get_ports {pioPSOC_Emif_Data[4]}]
# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -min -add_delay  5.000 [get_ports {pioPSOC_Emif_Data[5]}]
# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -max -add_delay 61.000 [get_ports {pioPSOC_Emif_Data[5]}]
# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -min -add_delay  5.000 [get_ports {pioPSOC_Emif_Data[6]}]
# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -max -add_delay 61.000 [get_ports {pioPSOC_Emif_Data[6]}]
# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -min -add_delay  5.000 [get_ports {pioPSOC_Emif_Data[7]}]
# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -max -add_delay 61.000 [get_ports {pioPSOC_Emif_Data[7]}]

# create_clock -period 166.667 -name virtualEmifRdClk
# set_output_delay -clock [get_clocks virtualEmifRdClk] -min -add_delay 10.000 [get_ports {pioPSOC_Emif_Data[*]}]
# set_output_delay -clock [get_clocks virtualEmifRdClk] -max -add_delay 10.000 [get_ports {pioPSOC_Emif_Data[*]}]
# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -min -add_delay -120.0 [get_ports {pioPSOC_Emif_Data[7]}]
# [TODO] set_output_delay -clock [get_clocks piPSOC_Emif_Clk] -max -add_delay   40.0 [get_ports {pioPSOC_Emif_Data[7]}]

# OBSOLETE set_output_delay -clock [get_clocks piCLKT_10GeClk_p] -min -add_delay -3.200 [get_ports {pioPSOC_Emif_Data[*]}]
# OBSOLETE set_output_delay -clock [get_clocks piCLKT_10GeClk_p] -max -add_delay  3.200 [get_ports {pioPSOC_Emif_Data[*]}]

# PSOC / Fcfg - Asynchronous Reset Input
set_input_delay -clock [get_clocks piCLKT_Usr0Clk_p] -min -add_delay 0.4 [get_ports piPSOC_Fcfg_Rst_n]
set_input_delay -clock [get_clocks piCLKT_Usr0Clk_p] -max -add_delay 0.4 [get_ports piPSOC_Fcfg_Rst_n]

#=====================================================================
# Timing Exceptions related to the Heart Beat LED
#=====================================================================
set_max_delay -from [get_pins SHELL/MEM/MC0/MCC/inst/u_ddr4_mem_intfc/u_ddr_cal_top/calDone_gated_reg/C] -to [get_pins SHELL/sLed_HeartBeat_reg/D] 10.0
set_max_delay -from [get_pins SHELL/MEM/MC1/MCC/inst/u_ddr4_mem_intfc/u_ddr_cal_top/calDone_gated_reg/C] -to [get_pins SHELL/sLed_HeartBeat_reg/D] 10.0

#=====================================================================
# Timing Exceptions for the Input Status Bits of MMIO/EMIF
#=====================================================================
# PHY_REG / STATUS / (0x10-b0) / MC0_InitCalibComplete 
set_false_path -from [get_pins SHELL/MEM/MC0/MCC/inst/u_ddr4_mem_intfc/u_ddr_cal_top/calDone_gated_reg/C] -to [get_pins {SHELL/MMIO/EMIF/sFab_Data_reg[128]/D}]
# PHY_REG / STATUS / (0x10-b1) / MC0_InitCalibComplete 
set_false_path -from [get_pins SHELL/MEM/MC1/MCC/inst/u_ddr4_mem_intfc/u_ddr_cal_top/calDone_gated_reg/C] -to [get_pins {SHELL/MMIO/EMIF/sFab_Data_reg[129]/D}]

#=====================================================================
# Timing Exceptions for the Output Control Bits of MMIO/EMIF
#=====================================================================
# PHY_REG / RESET / (0x18-b3) / LY3_Reset
# create_generated_clock -name {SHELL/sEmifReg_reg[195]} -source [get_pins SHELL/SuperCfg.ETH0/ETH/CORE/IP/U0/xpcs/U0/ten_gig_eth_pcs_pma_shared_clock_reset_block/txusrclk2_bufg_gt_i/O] -divide_by 1 [get_pins SHELL/HARD_SYNC_RST_3/DOUT]
create_generated_clock -name {SHELL/sEmifReg_reg[195]} -source [get_pins SHELL/SuperCfg.ETH0/ETH/CORE/IP/U0/xpcs/U0/ten_gig_eth_pcs_pma_shared_clock_reset_block/txusrclk2_bufg_gt_i/O] -divide_by 2 [get_pins SHELL/HARD_SYNC_RST_3/DOUT]

#=====================================================================
# Some More Exceptions [TODO]
#=====================================================================
set_false_path -from [get_pins SHELL/NTS0/ARP/CAM/sUpdateStatic_reg/G] -to [get_pins {SHELL/NTS0/ARP/CAM/CAM/ARP_IPv4_MAC_CAMSmartCamUpdate/Entry_reg[83]/D}]
set_max_delay -from [get_pins SHELL/HARD_SYNC_RST_3/DOUT] -to [get_pins SHELL/NTS0/ARP/CAM/sUpdateStatic_reg/D] 6.4

set_false_path -from [get_clocks {SHELL/sEmifReg_reg[195]}] -to [get_clocks -of_objects [get_pins SHELL/SuperCfg.ETH0/ETH/CORE/IP/inst/xpcs/inst/ten_gig_eth_pcs_pma_shared_clock_reset_block/txusrclk2_bufg_gt_i/O]]

set_false_path -from [get_ports piPSOC_Fcfg_Rst_n] -to [get_pins TOP_META_RST/DIN]



#=====================================================================
# Here are the Constraints added by the Timing Constraint Wizard
#=====================================================================

