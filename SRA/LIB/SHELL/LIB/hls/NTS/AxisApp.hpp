/*
 * Copyright 2016 -- 2020 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*****************************************************************************
 * @file       : AxisApp.hpp
 * @brief      : A class to access an APPlication data chunk transmitted over
 *                an AXI4-Stream interface.
 *
 * System:     : cloudFPGA
 * Component   : Shell, Network Transport Stack (NTS)
 * Language    : Vivado HLS
 *
 *----------------------------------------------------------------------------
 *
 * @details : The APPlication (APP) fields defined in this class refer to the
 *  format generated by the Network Transport Stack (NTS) at the application 
 *  layer interfaces. This application layer is the layer that is the closest
 *  to the end-user; it exposes streams of raw data between the NTS and the
 *  APP.   
 * 
 * \ingroup NTS
 * \addtogroup NTS
 * \{
 *****************************************************************************/

#ifndef _AXIS_APP_H_
#define _AXIS_APP_H_

#include "./AxisRaw.hpp"

/*******************************************************************************
 * APPlication Data - Data payload of a TCP segment or UDP datagram over AXI4S.
 *  As Encoded by the 10GbE MAC (.i.e LITTLE-ENDIAN order).
 *******************************************************************************/
class AxisApp: public AxisRaw {

  public:
    AxisApp() {}
    AxisApp(LE_tData tdata, LE_tKeep tkeep, LE_tLast tlast) :
      AxisRaw(tdata, tkeep, tlast) {}
    AxisApp(const AxisApp &axisApp) :
      AxisRaw(axisApp.tdata, axisApp.tkeep, axisApp.tlast) {}
    AxisApp(AxisRaw axisRaw) :
        AxisRaw(axisRaw.getLE_TData(), axisRaw.getLE_TKeep(), axisRaw.getLE_TLast()) {}

    /****************************************************************
     * AXIS_APP - BIG-ENDIAN HELPERS
     ****************************************************************/
    /* Set higher-half part of the 'tdata' field with a data encoded in BE order
     *        +---------------+---------------+---------------+---------------+
     * LITTLE |63        Lower-Half         32|31       Higher-Half          0|
     *        +---------------+---------------+---------------+---------------+
     */
    void setTDataHi(tDataHalf data) {
        tdata.range(31,  0) = swapDWord(data);
    }
    /* Get higher-half part of the 'tdata' field and return it in BE order
     *        +---------------+---------------+---------------+---------------+
     * LITTLE |63        Lower-Half         32|31       Higher-Half          0|
     *       +---------------+---------------+---------------+---------------+
     */
    tDataHalf getTDataHi() {
        return swapDWord(tdata.range(31, 0));
    }
    /* Set lower-half part of the 'tdata' field with a data encoded in BE order
     *        +---------------+---------------+---------------+---------------+
     * LITTLE |63        Lower-Half         32|31       Higher-Half          0|
     *        +---------------+---------------+---------------+---------------+
     */
    void setTDataLo(tDataHalf data) {
        tdata.range(63, 32) = swapDWord(data);
    }
    /* Get lower-half part of the 'tdata' field and return it in BE order
     *        +---------------+---------------+---------------+---------------+
     * LITTLE |63        Lower-Half         32|31       Higher-Half          0|
     *        +---------------+---------------+---------------+---------------+
     */
    tDataHalf getTDataLo() {
        return swapDWord(tdata.range(63,32));
    }
    /*
     * Set higher-half part of the 'tkeep' field and return it in BE order
     *        +-----------------+-----------------+
     * LITTLE |7  Lower-Half  4 |3  Higher-Half  0|
     *        +-----------------+-----------------+
     */
    void setTKeepHi(tKeepHalf keep) {
        tkeep(3,0) = swapNibble(keep);
    }
    /*
     * Get higher-half part of the 'tkeep' field and return it in BE order
     *        +-----------------+-----------------+
     * LITTLE |7  Lower-Half  4 |3  Higher-Half  0|
     *        +-----------------+-----------------+
     */
    tKeepHalf getTKeepHi() {
        return swapNibble(tkeep.range(3,0));
    }
    /*
     * Set higher-half part of the 'tkeep' field and return it in BE order
     *        +-----------------+-----------------+
     * LITTLE |7  Lower-Half  4 |3  Higher-Half  0|
     *        +-----------------+-----------------+
      */
    void setTKeepLo(tKeepHalf keep) {
        tkeep(7,4) = swapNibble(keep);
    }
    /*
     * Get lower-half part of the 'tkeep' field and return it in BE order
     *        +-----------------+-----------------+
     * LITTLE |7  Lower-Half  4 |3  Higher-Half  0|
     *        +-----------------+-----------------+
     */
    tKeepHalf getTKeepLo() {
        return swapNibble(tkeep.range(7,4));
    }

  private:
    // Reverse the bits within a nibble.
    ap_uint<4> swapNibble(ap_uint<4> nibble) {
        return (nibble.range(0,3));
    }
    // Reverse the bits within a byte.
    ap_uint<8> swapByte(ap_uint<8> byte) {
        return (byte.range(0,7));
    }
    // Swap the two bytes of a word (.i.e, 16 bits)
    ap_uint<16> swapWord(ap_uint<16> word) {
      return (word.range(7,0), word.range(15, 8));
    }
    // Swap the four bytes of a double-word (.i.e, 32 bits)
    ap_uint<32> swapDWord(ap_uint<32> dword) {
      return (dword.range( 7, 0), dword.range(15,  8),
              dword.range(23,16), dword.range(31, 24));
    }
};

#endif

/*! \} */
