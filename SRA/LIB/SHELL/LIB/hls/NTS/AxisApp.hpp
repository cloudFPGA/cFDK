/************************************************
Copyright (c) 2016-2019, IBM Research.
Copyright (c) 2015, Xilinx, Inc.

All rights reserved.
Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.
3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software
without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
************************************************/

/*****************************************************************************
 * @file       : AxisApp.hpp
 * @brief      : A class to access an APPlication data chunk transmitted over
 *                an AXI4-Stream interface.
 *
 * System:     : cloudFPGA
 * Component   : Shell, Network Transport Session (NTS)
 * Language    : Vivado HLS
 *
 *----------------------------------------------------------------------------
 *
 * @details : The APPlication (APP) fields defined in this class refer to the
 *  format generated by the Network Transport Stack (NTS) at the application 
 *  layer interfaces. This application layer is the layer that is the closest
 *  to the end-user; it exposes streams of raw data between the NTS and the
 *  APP.   
 * 
 *****************************************************************************/

#ifndef AXIS_APP_H_
#define AXIS_APP_H_

#include "./AxisRaw.hpp"

/******************************************************************************
 * APP Data over AXI4-STREAMING
 *  As Encoded by the 10GbE MAC (.i.e LITTLE-ENDIAN order).
 *******************************************************************************/
class AxisApp: public AxisRaw {

  public:
    AxisApp() {}
    AxisApp(AxisRaw axisRaw) :
        AxisRaw(axisRaw.getLE_TData(), axisRaw.getLE_TKeep(), axisRaw.getLE_TLast()) {}
    AxisApp(LE_tData tdata, LE_tKeep tkeep, LE_tLast tlast) :
      AxisRaw(tdata, tkeep, tlast) {}
    AxisApp(const AxisApp &axisApp) :
      AxisRaw(axisApp.tdata, axisApp.tkeep, axisApp.tlast) {}

    /****************************************************************
     * AXIS_UDP - BIG-ENDIAN HELPERS (specific to UDP-over-IPv4)
     ****************************************************************/

    /* Set higher-half part of the 'tdata' field with a data encoded in BE order
     *        +---------------+---------------+---------------+---------------+
     * LITTLE |63        Lower-Half         32|31       Higher-Half          0|
     *        +---------------+---------------+---------------+---------------+
     */
    void setTDataHi(tDataHalf data) {
        tdata.range(31,  0) = swapDWord(data);
    }
    /* Get higher-half part of the 'tdata' field and return it in BE order
     *        +---------------+---------------+---------------+---------------+
     * LITTLE |63        Lower-Half         32|31       Higher-Half          0|
     *       +---------------+---------------+---------------+---------------+
     */
    tDataHalf getTDataHi() {
        return swapDWord(tdata.range(31, 0));
    }
    /* Set lower-half part of the 'tdata' field with a data encoded in BE order
     *        +---------------+---------------+---------------+---------------+
     * LITTLE |63        Lower-Half         32|31       Higher-Half          0|
     *        +---------------+---------------+---------------+---------------+
     */
    void setTDataLo(tDataHalf data) {
        tdata.range(63, 32) = swapDWord(data);
    }
    /* Get lower-half part of the 'tdata' field and return it in BE order
     *        +---------------+---------------+---------------+---------------+
     * LITTLE |63        Lower-Half         32|31       Higher-Half          0|
     *        +---------------+---------------+---------------+---------------+
     */
    tDataHalf getTDataLo() {
        return swapDWord(tdata.range(63,32));
    }
    // Set higher-half part of the 'tkeep' field with a data encoded in BE order
    void setTKeepHi(tKeepHalf keep) {
        tkeep(3,0) = swapNibble(keep);
    }
    // Get higher-half part of the 'tkeep' field and return it in BE order
    tKeepHalf getTKeepHi() {
        return swapNibble(tkeep.range(3,0));
    }
    // Set lower-half part of the 'tkeep' field with a data encoded in BE order
    void setTKeepLo(tKeepHalf keep) {
        tkeep(7,4) = swapNibble(keep);
    }
    // Get lower-half part of the 'tkeep' field and return it in BE order
    tKeepHalf getTKeepLo() {
        return swapNibble(tkeep.range(7,4));
    }

  private:
    // Reverse the bits within a nibble.
    ap_uint<4> swapNibble(ap_uint<4> nibble) {
        return (nibble.range(0,3));
    }
    // Reverse the bits within a byte.
    ap_uint<8> swapByte(ap_uint<8> byte) {
        return (byte.range(0,7));
    }
    // Swap the two bytes of a word (.i.e, 16 bits)
    ap_uint<16> swapWord(ap_uint<16> word) {
      return (word.range(7,0), word.range(15, 8));
    }
    // Swap the four bytes of a double-word (.i.e, 32 bits)
    ap_uint<32> swapDWord(ap_uint<32> dword) {
      return (dword.range( 7, 0), dword.range(15,  8),
              dword.range(23,16), dword.range(31, 24));
    }
};

#endif
